/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.openapi.client;

import com.openapi.client.model.ErrorResponse;
import com.openapi.client.model.Project;
import com.openapi.client.model.ProjectApiKey;
import com.openapi.client.model.ProjectApiKeyDeleteResponse;
import com.openapi.client.model.ProjectApiKeyListResponse;
import com.openapi.client.model.ProjectCreateRequest;
import com.openapi.client.model.ProjectListResponse;
import com.openapi.client.model.ProjectServiceAccount;
import com.openapi.client.model.ProjectServiceAccountCreateRequest;
import com.openapi.client.model.ProjectServiceAccountCreateResponse;
import com.openapi.client.model.ProjectServiceAccountDeleteResponse;
import com.openapi.client.model.ProjectServiceAccountListResponse;
import com.openapi.client.model.ProjectUpdateRequest;
import com.openapi.client.model.ProjectUser;
import com.openapi.client.model.ProjectUserCreateRequest;
import com.openapi.client.model.ProjectUserDeleteResponse;
import com.openapi.client.model.ProjectUserListResponse;
import com.openapi.client.model.ProjectUserUpdateRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Ignore
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Archives a project in the organization. Archived projects cannot be used or updated.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveProjectTest() {
        String projectId = null;
        Project response = api.archiveProject(projectId);

        // TODO: test validations
    }
    /**
     * Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectTest() {
        ProjectCreateRequest body = null;
        Project response = api.createProject(body);

        // TODO: test validations
    }
    /**
     * Creates a new service account in the project. This also returns an unredacted API key for the service account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectServiceAccountTest() {
        ProjectServiceAccountCreateRequest body = null;
        String projectId = null;
        ProjectServiceAccountCreateResponse response = api.createProjectServiceAccount(body, projectId);

        // TODO: test validations
    }
    /**
     * Adds a user to the project. Users must already be members of the organization to be added to a project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectUserTest() {
        ProjectUserCreateRequest body = null;
        String projectId = null;
        ProjectUser response = api.createProjectUser(body, projectId);

        // TODO: test validations
    }
    /**
     * Deletes an API key from the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectApiKeyTest() {
        String projectId = null;
        String keyId = null;
        ProjectApiKeyDeleteResponse response = api.deleteProjectApiKey(projectId, keyId);

        // TODO: test validations
    }
    /**
     * Deletes a service account from the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectServiceAccountTest() {
        String projectId = null;
        String serviceAccountId = null;
        ProjectServiceAccountDeleteResponse response = api.deleteProjectServiceAccount(projectId, serviceAccountId);

        // TODO: test validations
    }
    /**
     * Deletes a user from the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteProjectUserTest() {
        String projectId = null;
        String userId = null;
        ProjectUserDeleteResponse response = api.deleteProjectUser(projectId, userId);

        // TODO: test validations
    }
    /**
     * Returns a list of API keys in the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectApiKeysTest() {
        String projectId = null;
        Integer limit = null;
        String after = null;
        ProjectApiKeyListResponse response = api.listProjectApiKeys(projectId, limit, after);

        // TODO: test validations
    }
    /**
     * Returns a list of service accounts in the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectServiceAccountsTest() {
        String projectId = null;
        Integer limit = null;
        String after = null;
        ProjectServiceAccountListResponse response = api.listProjectServiceAccounts(projectId, limit, after);

        // TODO: test validations
    }
    /**
     * Returns a list of users in the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectUsersTest() {
        String projectId = null;
        Integer limit = null;
        String after = null;
        ProjectUserListResponse response = api.listProjectUsers(projectId, limit, after);

        // TODO: test validations
    }
    /**
     * Returns a list of projects.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listProjectsTest() {
        Integer limit = null;
        String after = null;
        Boolean includeArchived = null;
        ProjectListResponse response = api.listProjects(limit, after, includeArchived);

        // TODO: test validations
    }
    /**
     * Modifies a project in the organization.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyProjectTest() {
        ProjectUpdateRequest body = null;
        Project response = api.modifyProject(body);

        // TODO: test validations
    }
    /**
     * Modifies a user&#x27;s role in the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void modifyProjectUserTest() {
        ProjectUserUpdateRequest body = null;
        ProjectUser response = api.modifyProjectUser(body);

        // TODO: test validations
    }
    /**
     * Retrieves a project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectTest() {
        String projectId = null;
        Project response = api.retrieveProject(projectId);

        // TODO: test validations
    }
    /**
     * Retrieves an API key in the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectApiKeyTest() {
        String projectId = null;
        String keyId = null;
        ProjectApiKey response = api.retrieveProjectApiKey(projectId, keyId);

        // TODO: test validations
    }
    /**
     * Retrieves a service account in the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectServiceAccountTest() {
        String projectId = null;
        String serviceAccountId = null;
        ProjectServiceAccount response = api.retrieveProjectServiceAccount(projectId, serviceAccountId);

        // TODO: test validations
    }
    /**
     * Retrieves a user in the project.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveProjectUserTest() {
        String projectId = null;
        String userId = null;
        ProjectUser response = api.retrieveProjectUser(projectId, userId);

        // TODO: test validations
    }
}
