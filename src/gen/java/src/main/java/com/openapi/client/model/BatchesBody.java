/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.openapi.client.model.Metadata;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * BatchesBody
 */



public class BatchesBody {
  @JsonProperty("input_file_id")
  private String inputFileId = null;

  /**
   * The endpoint to be used for all requests in the batch. Currently &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported. Note that &#x60;/v1/embeddings&#x60; batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
   */
  public enum EndpointEnum {
    CHAT_COMPLETIONS("/v1/chat/completions"),
    EMBEDDINGS("/v1/embeddings"),
    COMPLETIONS("/v1/completions");

    private String value;

    EndpointEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static EndpointEnum fromValue(String input) {
      for (EndpointEnum b : EndpointEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("endpoint")
  private EndpointEnum endpoint = null;

  /**
   * The time frame within which the batch should be processed. Currently only &#x60;24h&#x60; is supported.
   */
  public enum CompletionWindowEnum {
    _24H("24h");

    private String value;

    CompletionWindowEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CompletionWindowEnum fromValue(String input) {
      for (CompletionWindowEnum b : CompletionWindowEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("completion_window")
  private CompletionWindowEnum completionWindow = null;

  @JsonProperty("metadata")
  private Metadata metadata = null;

  public BatchesBody inputFileId(String inputFileId) {
    this.inputFileId = inputFileId;
    return this;
  }

   /**
   * The ID of an uploaded file that contains requests for the new batch.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose &#x60;batch&#x60;. The file can contain up to 50,000 requests, and can be up to 200 MB in size. 
   * @return inputFileId
  **/
  @Schema(required = true, description = "The ID of an uploaded file that contains requests for the new batch.  See [upload file](/docs/api-reference/files/create) for how to upload a file.  Your input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size. ")
  public String getInputFileId() {
    return inputFileId;
  }

  public void setInputFileId(String inputFileId) {
    this.inputFileId = inputFileId;
  }

  public BatchesBody endpoint(EndpointEnum endpoint) {
    this.endpoint = endpoint;
    return this;
  }

   /**
   * The endpoint to be used for all requests in the batch. Currently &#x60;/v1/chat/completions&#x60;, &#x60;/v1/embeddings&#x60;, and &#x60;/v1/completions&#x60; are supported. Note that &#x60;/v1/embeddings&#x60; batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
   * @return endpoint
  **/
  @Schema(required = true, description = "The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.")
  public EndpointEnum getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(EndpointEnum endpoint) {
    this.endpoint = endpoint;
  }

  public BatchesBody completionWindow(CompletionWindowEnum completionWindow) {
    this.completionWindow = completionWindow;
    return this;
  }

   /**
   * The time frame within which the batch should be processed. Currently only &#x60;24h&#x60; is supported.
   * @return completionWindow
  **/
  @Schema(required = true, description = "The time frame within which the batch should be processed. Currently only `24h` is supported.")
  public CompletionWindowEnum getCompletionWindow() {
    return completionWindow;
  }

  public void setCompletionWindow(CompletionWindowEnum completionWindow) {
    this.completionWindow = completionWindow;
  }

  public BatchesBody metadata(Metadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @Schema(description = "")
  public Metadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Metadata metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchesBody batchesBody = (BatchesBody) o;
    return Objects.equals(this.inputFileId, batchesBody.inputFileId) &&
        Objects.equals(this.endpoint, batchesBody.endpoint) &&
        Objects.equals(this.completionWindow, batchesBody.completionWindow) &&
        Objects.equals(this.metadata, batchesBody.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputFileId, endpoint, completionWindow, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchesBody {\n");
    
    sb.append("    inputFileId: ").append(toIndentedString(inputFileId)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    completionWindow: ").append(toIndentedString(completionWindow)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
