/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * OpenAPI spec version: 2.3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.openapi.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Breakdown of tokens used in a completion.
 */
@Schema(description = "Breakdown of tokens used in a completion.")


public class RunCompletionUsageCompletionTokensDetails {
  @JsonProperty("reasoning_tokens")
  private Integer reasoningTokens = null;

  public RunCompletionUsageCompletionTokensDetails reasoningTokens(Integer reasoningTokens) {
    this.reasoningTokens = reasoningTokens;
    return this;
  }

   /**
   * Tokens generated by the model for reasoning.
   * @return reasoningTokens
  **/
  @Schema(description = "Tokens generated by the model for reasoning.")
  public Integer getReasoningTokens() {
    return reasoningTokens;
  }

  public void setReasoningTokens(Integer reasoningTokens) {
    this.reasoningTokens = reasoningTokens;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunCompletionUsageCompletionTokensDetails runCompletionUsageCompletionTokensDetails = (RunCompletionUsageCompletionTokensDetails) o;
    return Objects.equals(this.reasoningTokens, runCompletionUsageCompletionTokensDetails.reasoningTokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reasoningTokens);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunCompletionUsageCompletionTokensDetails {\n");
    
    sb.append("    reasoningTokens: ").append(toIndentedString(reasoningTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
